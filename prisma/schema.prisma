// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model UserProfile {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  password          String
  createdAt         DateTime   @default(now())
  companyId         String
  companyName       String
  address           String
  administrator     Boolean
  shippingInformations ShippingInformations[]
  }

model ShippingInformations {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  containerProfile  ContainerProfile[]
  userProfileId     Int //foreign key
  userProfile       UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
    }


model ContainerProfile {
  id                         Int        @id @default(autoincrement())
  createdAt                  DateTime   @default(now())
  quantity                   Int
  locationOrigin             LocationOrigin []
  wasteProfile               WasteProfile []
  containerType              ContainerType []
  shippingInformationsId     Int // foreign key
  shippingInformations       ShippingInformations @relation(fields: [shippingInformationsId], references: [id], onDelete: Cascade)
  }

  model LocationOrigin {
  id                   Int        @id @default(autoincrement())
  name                 String
  address              String
  origin               String
  containerProfileId   Int // foreign key
  containerProfile     ContainerProfile @relation(fields: [containerProfileId], references: [id], onDelete: Cascade)
  }


  model WasteProfile  {
  id                          Int        @id @default(autoincrement())
  name                        String
  typeOfWaste                 String
  wasteDescription            String
  risksAndHazards             String
  processingMethods           String
  physicalProperties          String
  chemicalProperties          String
  biologicalProperties        String
  collectionProcedures        String
  recommendationsForTransport String
  containerProfileId          Int // foreign key
  containerProfile            ContainerProfile @relation(fields: [containerProfileId], references: [id], onDelete: Cascade)
  }


  model ContainerType {
  id                   Int        @id @default(autoincrement())
  name                 String
  material             String
  volume               Int
  carryingCapacity     Int
  radioactivityLevel   String
  physicalProperties   String
  footprint            Int
  description          String
  containerProfileId   Int // foreign key
  containerProfile     ContainerProfile @relation(fields: [containerProfileId], references: [id], onDelete: Cascade)
  }


  
