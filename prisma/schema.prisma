// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  createdAt            DateTime              @default(now())
  companyId            Int
  companyName          String
  address              String
  administrator        Boolean
  shippingInformations ShippingInformation[]
}

// Setep 1 Shipping Informations

model ShippingInformation {
  id                 Int                @id @default(autoincrement())
  entryDateTime      DateTime           @default(now())
  exitDateTime       DateTime?
  status             String             @default("IN")
  companyName        String
  driverName         String
  registrationPlates String
  containerProfiles  ContainerProfile[]
  userProfileId      Int?               @unique
  userProfile        UserProfile?       @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model ContainerProfile {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  quantity              Int
  shippingInformationId Int //  foreign key
  shippingInformation   ShippingInformation? @relation(fields: [shippingInformationId], references: [id], onDelete: Cascade)
  locationOriginId      Int
  locationOrigin        LocationOrigin       @relation(fields: [locationOriginId], references: [id], onDelete: Cascade)
  wasteProfileId        Int
  wasteProfile          WasteProfile         @relation(fields: [wasteProfileId], references: [id], onDelete: Cascade)
  containerTypeId       Int
  containerType         ContainerType        @relation(fields: [containerTypeId], references: [id], onDelete: Cascade)
}

model LocationOrigin {
  id                Int                @id @default(autoincrement())
  name              String
  address           String
  origin            String
  containerProfiles ContainerProfile[]

  // If we have a "containerProfiles" field in the "LocationOrigin" model that is of type "ContainerProfile[]", 
  // it means that it is expected that one location can be associated with multiple "ContainerProfile" entities.
}

model WasteProfile {
  id                          Int                @id @default(autoincrement())
  name                        String
  typeOfWaste                 String
  wasteDescription            String
  risksAndHazards             String
  processingMethods           String
  physicalProperties          String
  chemicalProperties          String
  biologicalProperties        String
  collectionProcedures        String
  recommendationsForTransport String
  containerProfiles           ContainerProfile[]
}

model ContainerType {
  id                 Int                @id @default(autoincrement())
  name               String
  material           String
  volume             Float
  carryingCapacity   Float
  radioactivityLevel String
  physicalProperties String
  footprint          Float
  description        String
  containerProfiles  ContainerProfile[]
}

// Step 2 "Pre-storage of waste"

model PreStorageLocation {
  id                   Int                    @id @default(autoincrement())
  name                 String
  surfaceArea          Int
  containerFootprint   Int
  preStorageFor        String
  containerType        String
  wasteProfile         String
  preStorageEntry      PreStorageEntry[]
  preStorageConditions PreStorageConditions[]
}

model PreStorageEntry {
  id                              Int                           @id @default(autoincrement())
  createdAt                       DateTime                      @default(now())
  quantity                        Int
  preStorageLocationId            Int
  preStorageLocation              PreStorageLocation            @relation(fields: [preStorageLocationId], references: [id], onDelete: Cascade)
  responsibleEmployeePreStorageId Int
  responsibleEmployeePreStorage   ResponsibleEmployeePreStorage @relation(fields: [responsibleEmployeePreStorageId], references: [id], onDelete: Cascade)
}

model ResponsibleEmployeePreStorage {
  id                   Int                    @id @default(autoincrement())
  name                 String
  surname              String
  dateOfBirth          DateTime
  address              String
  qualifications       String
  safetyTraining       Boolean                @default(false)
  preStorageEntry      PreStorageEntry[]
  PreStorageConditions PreStorageConditions[]
}

// Step 2.1 Pre-Storage Conditions

model PreStorageConditions {
  id                              Int                           @id @default(autoincrement())
  createdAt                       DateTime                      @default(now())
  preStorageTemperature           Float
  preStorageRadiationLevel        Float
  preStorageHumidity              Float
  preStoragePressure              Int
  preStorageLocationId            Int
  preStorageResponsibleEmployeeId Int
  preStorageLocation              PreStorageLocation            @relation(fields: [preStorageLocationId], references: [id], onDelete: Cascade)
  preStorageResponsibleEmployee   ResponsibleEmployeePreStorage @relation(fields: [preStorageResponsibleEmployeeId], references: [id], onDelete: Cascade)
}

// Step 3 "Storage of waste"

model StorageOfWaste {
  id                           Int                        @id @default(autoincrement())
  createdAt                    DateTime                   @default(now())
  quantity                     Int
  storageTypeId                Int                        @unique
  storageType                  StorageType                @relation(fields: [storageTypeId], references: [id], onDelete: Cascade)
  storageLocationId            Int                        @unique
  storageLocation              StorageLocation            @relation(fields: [storageLocationId], references: [id], onDelete: Cascade)
  responsibleEmployeeStorageId Int                        @unique
  responsibleEmployeeStorage   ResponsibleEmployeeStorage @relation(fields: [responsibleEmployeeStorageId], references: [id], onDelete: Cascade)
}

model StorageType {
  id              Int              @id @default(autoincrement())
  name            String
  surfaceArea     Int
  storageFor      String
  storageOfWastes StorageOfWaste[]
}

model StorageLocation {
  id              Int              @id @default(autoincrement())
  name            String
  level           Int
  delepth         Int
  roomName        String
  storageOfWastes StorageOfWaste[]
}

model ResponsibleEmployeeStorage {
  id              Int              @id @default(autoincrement())
  name            String
  surname         String
  dateOfBirth     Int
  address         String
  position        String
  safetyTraining  Boolean
  storageOfWastes StorageOfWaste[]
}

// Step 3.1 Storage Conditions

model StorageConditions {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  storageTemperature    Float
  storageRadiationLevel Float
  storageHumidity       Float
  storagePressure       Float
}
