
** Next.js **

		
	npx create-next-app@latest      //ime app ce se dodijeliti u toku snimanja
        npx create-next-app@13.1.2    //da biste instalirali verziju 13.1.2 Next.js

	pnpm install // instaliras sve dependencies


** Kada ne mozemo instalirati neke od ovih library (najcesce zbog razlicith verzija) onda na kraju ovog koda dodajemo jos
	--legacy-peer-deps   ili   --force    (mada bolje ovo --legacy-peer-deps)

	** npm install -g pnpm //  This is done. So now i can use the "pnpm" command from anywhere on your system without needing to install it for every project

--------------------

** Axios ** 

	pnpm install axios


--------------------


** NextAuth.js**
(https://next-auth.js.org/)

			pnpm install --save-exact next-auth@3 // verzija 3

	
--------------------

** Import Google Fonts in next.js 14 **
(https://prismic.io/blog/nextjs-fonts)
(https://nextjs.org/docs/pages/building-your-application/optimizing/fonts)


🚚 IMPORT 

// src/app/layout.js

import './globals.css'

//👇 Import our second font
import { Open_Sans, Roboto_Mono } from 'next/font/google'

const openSans = Open_Sans({
  subsets: ['latin'],
  display: 'swap',
  //👇 Add variable to our object
  variable: '--font-opensans',
})

//👇 Configure the object for our second font
const robotoMono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }) {
  return (
    // 👇 Attach CSS variables to HTML
    <html
      lang="en"
      className={`${openSans.variable} ${robotoMono.variable}`}
    >
      <body>{children}</body>
    </html>
  )
}
 
 --- ******** ---

// tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",

    // Or if using `src` directory:
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        // 👇 Add CSS variables
        sans: ["var(--font-opensans)"],
        mono: ["var(--font-roboto-mono)"],
      },
    },
  },
  plugins: [],
};

--------------------

** Prettier plugin for Prisma **

npm i -D prettier-plugin-prisma


--------------------

** prettier-plugin-tailwindcss **
(https://github.com/tailwindlabs/prettier-plugin-tailwindcss)

npm install -D prettier prettier-plugin-tailwindcss

// prettier.config.js (if this file is not made automatically, then make it.)

module.exports = {
  plugins: ['prettier-plugin-tailwindcss'],
}

--------------------

Tailwind CSS Animated
(https://github.com/new-data-services/tailwindcss-animated#readme)
(https://tailwindcss-animated.com)

npm i tailwindcss-animated

Then add the plugin to your tailwind.config.js file:

// tailwind.config.js
module.exports = {
  // ...
  plugins: [
    require('tailwindcss-animated')
  ],
}

--------------------
 ** react-icons ** 
(https://www.npmjs.com/package/react-icons)

 npm i react-icons

 import { FaMoon, FaSun } from 'react-icons/fa'

unction Question() {
  return (
    <h3>
      Lets go for a <FaMoon />?
    </h3>
  );
}


--------------------
** Redux **

--> Redux-devtools-extension:

	github.com/zalmoxisus/redux-devtools-extension

	-> Pod "Installation" idemo

	1. For Chrome i kliknemo from Chrome Web Store, kako bismo instalirali dodatak u Chrome.

	-> Pod 1.2 Advanced store setup kopiramo odredene dodatke koje treba da importujemo u nas code a to su (applyMiddleware, compose)

 	  Code importujemo u glavni (root) index file !!!
  	 
	 import { createStore, applyMiddleware, compose } from 'redux';

** Redux ** 

	pnpm install redux-form --legacy-peer-deps


	--> Redux Final Form

	pnpm install --save final-form react-final-form


--------------------
** Prisma **

(https://www.prisma.io/nextjs)


--  Installing Prisma  --

1. npm install prisma --save-dev

2. npx prisma init


--  Migracija baze podataka ---

Nakon što definirate svoj model (schema), možete izvršiti naredbu za migraciju baze podataka kako biste stvorili tablice u bazi podataka:
 
 npx prisma migrate dev     --> (ili ako update-ujemo schemu)



-- Pristupanje Prisma u Next.js aplikaciji --


	1. npm install @prisma/client

	Instalacija potrebnih biblioteka


	2. npx prisma generate

	Ova naredba će pročitati vašu Prisma schemu i .env datoteku, a zatim generirati kôd koji će se nalaziti u direktoriju
	node_modules/@prisma/client. Ovaj generirani kôd uključuje Prisma klijenta koji se koristi za pristup bazi podataka.
	Nakon što izvršite npx prisma generate, možete početi koristiti Prisma klijenta u svojoj Next.js aplikaciji 


  -- Connecting Prisma with loacl PostgreSQL database -- 

    opsirnije pogledati u "Connecting PostgreSQL.txt" file-u.
  

--------------------

** react-markdown **
(https://www.npmjs.com/package/react-markdown)

	pnpm install react-markdown

	import ReactMarkdown from "react-markdown"

--------------------
** gray-matter **
(https://www.npmjs.com/package/gray-matter)
(That's a package which allows us to read a "markdown" file and split it into "metadata" and the actual markdown content.)


	pnpm install gray-matter 

--------------------

** React Syntax Highlighter **

--> Syntax highlighting is a feature where text, especially source codes, is given unique design characteristics,
    such as a change in color or font, ...

	pnpm install react-syntax-highlighter

	import SyntaxHighlighter from 'react-syntax-highlighter';

		ili ovako:

		import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";

		pa onda se pozivamo samo na "Prism"

--------------------


** MongoDB ** 
(https://www.mongodb.com/home)
(https://www.npmjs.com/package/mongodb)

	pnpm install mongodb
	import { MongoClient } from "mongodb";

--------------------

** Mongo DB **

	<-- Kako se konektovati na Mongo DB -->

    ako zelimo da se konektujemo na Mongo DB, prvo moramo pokrenuti "mongod" tako sto cemo u 
    u "PowerShell" ukucati "mongod", i on ce ga pokrenutu automatski. Zatim u novom PowerShell
    potrebno je ukucati "mongo" i onda bitrebalo da je se konektovo na Mongo DB...
    Zatim u "bash" provjerimo da se sigurno nalazimo u folderu sa kojim radimo i zatim kucamo
    "nodemon app.js" ili index.js ili kako na  se vec zove nas js file preko kojeg omogucujemo vezu


--------------------

** VS Code Comment **

	In Visual Studio: Ctrl+K+C will comment ->  Ctrl+K+U will uncomment

** Comment in JSX ** 

	{/* TEXT */}


--------------------